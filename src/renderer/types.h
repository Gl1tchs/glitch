#pragma once

// defines handles that are not needed to be freed by user
#define GL_DEFINE_HANDLE(object) typedef struct object##_T* object;

// defines handles that are needed to be freed by user
#define GL_DEFINE_NON_DISPATCHABLE_HANDLE(object)                              \
	typedef struct object##_T* object;

GL_DEFINE_NON_DISPATCHABLE_HANDLE(Context)
GL_DEFINE_NON_DISPATCHABLE_HANDLE(Buffer)
GL_DEFINE_NON_DISPATCHABLE_HANDLE(Image)
GL_DEFINE_NON_DISPATCHABLE_HANDLE(CommandPool)
GL_DEFINE_HANDLE(CommandBuffer)
GL_DEFINE_NON_DISPATCHABLE_HANDLE(CommandQueue) //
GL_DEFINE_NON_DISPATCHABLE_HANDLE(Swapchain)
GL_DEFINE_NON_DISPATCHABLE_HANDLE(Pipeline) //
GL_DEFINE_NON_DISPATCHABLE_HANDLE(Shader)
GL_DEFINE_NON_DISPATCHABLE_HANDLE(UniformSet)
GL_DEFINE_NON_DISPATCHABLE_HANDLE(Fence) //
GL_DEFINE_NON_DISPATCHABLE_HANDLE(Semaphore) //

enum DataFormat {
	DATA_FORMAT_UNDEFINED = 0,
	DATA_FORMAT_R8_UNORM = 9,
	DATA_FORMAT_R8_SNORM = 10,
	DATA_FORMAT_R8_USCALED = 11,
	DATA_FORMAT_R8_SSCALED = 12,
	DATA_FORMAT_R8_UINT = 13,
	DATA_FORMAT_R8_SINT = 14,
	DATA_FORMAT_R8_SRGB = 15,
	DATA_FORMAT_R8G8_UNORM = 16,
	DATA_FORMAT_R8G8_SNORM = 17,
	DATA_FORMAT_R8G8_USCALED = 18,
	DATA_FORMAT_R8G8_SSCALED = 19,
	DATA_FORMAT_R8G8_UINT = 20,
	DATA_FORMAT_R8G8_SINT = 21,
	DATA_FORMAT_R8G8_SRGB = 22,
	DATA_FORMAT_R8G8B8_UNORM = 23,
	DATA_FORMAT_R8G8B8_SNORM = 24,
	DATA_FORMAT_R8G8B8_USCALED = 25,
	DATA_FORMAT_R8G8B8_SSCALED = 26,
	DATA_FORMAT_R8G8B8_UINT = 27,
	DATA_FORMAT_R8G8B8_SINT = 28,
	DATA_FORMAT_R8G8B8_SRGB = 29,
	DATA_FORMAT_B8G8R8_UNORM = 30,
	DATA_FORMAT_B8G8R8_SNORM = 31,
	DATA_FORMAT_B8G8R8_USCALED = 32,
	DATA_FORMAT_B8G8R8_SSCALED = 33,
	DATA_FORMAT_B8G8R8_UINT = 34,
	DATA_FORMAT_B8G8R8_SINT = 35,
	DATA_FORMAT_B8G8R8_SRGB = 36,
	DATA_FORMAT_R8G8B8A8_UNORM = 37,
	DATA_FORMAT_R8G8B8A8_SNORM = 38,
	DATA_FORMAT_R8G8B8A8_USCALED = 39,
	DATA_FORMAT_R8G8B8A8_SSCALED = 40,
	DATA_FORMAT_R8G8B8A8_UINT = 41,
	DATA_FORMAT_R8G8B8A8_SINT = 42,
	DATA_FORMAT_R8G8B8A8_SRGB = 43,
	DATA_FORMAT_B8G8R8A8_UNORM = 44,
	DATA_FORMAT_B8G8R8A8_SNORM = 45,
	DATA_FORMAT_B8G8R8A8_USCALED = 46,
	DATA_FORMAT_B8G8R8A8_SSCALED = 47,
	DATA_FORMAT_B8G8R8A8_UINT = 48,
	DATA_FORMAT_B8G8R8A8_SINT = 49,
	DATA_FORMAT_B8G8R8A8_SRGB = 50,
	DATA_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
	DATA_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
	DATA_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
	DATA_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
	DATA_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
	DATA_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
	DATA_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
	DATA_FORMAT_R16_UNORM = 70,
	DATA_FORMAT_R16_SNORM = 71,
	DATA_FORMAT_R16_USCALED = 72,
	DATA_FORMAT_R16_SSCALED = 73,
	DATA_FORMAT_R16_UINT = 74,
	DATA_FORMAT_R16_SINT = 75,
	DATA_FORMAT_R16_SFLOAT = 76,
	DATA_FORMAT_R16G16_UNORM = 77,
	DATA_FORMAT_R16G16_SNORM = 78,
	DATA_FORMAT_R16G16_USCALED = 79,
	DATA_FORMAT_R16G16_SSCALED = 80,
	DATA_FORMAT_R16G16_UINT = 81,
	DATA_FORMAT_R16G16_SINT = 82,
	DATA_FORMAT_R16G16_SFLOAT = 83,
	DATA_FORMAT_R16G16B16_UNORM = 84,
	DATA_FORMAT_R16G16B16_SNORM = 85,
	DATA_FORMAT_R16G16B16_USCALED = 86,
	DATA_FORMAT_R16G16B16_SSCALED = 87,
	DATA_FORMAT_R16G16B16_UINT = 88,
	DATA_FORMAT_R16G16B16_SINT = 89,
	DATA_FORMAT_R16G16B16_SFLOAT = 90,
	DATA_FORMAT_R16G16B16A16_UNORM = 91,
	DATA_FORMAT_R16G16B16A16_SNORM = 92,
	DATA_FORMAT_R16G16B16A16_USCALED = 93,
	DATA_FORMAT_R16G16B16A16_SSCALED = 94,
	DATA_FORMAT_R16G16B16A16_UINT = 95,
	DATA_FORMAT_R16G16B16A16_SINT = 96,
	DATA_FORMAT_R16G16B16A16_SFLOAT = 97,
	DATA_FORMAT_D16_UNORM = 124,
	DATA_FORMAT_D16_UNORM_S8_UINT = 128,
	DATA_FORMAT_D24_UNORM_S8_UINT = 129,
	DATA_FORMAT_D32_SFLOAT = 126,
	DATA_FORMAT_MAX = 0x7FFFFFFF,
};

enum MemoryAllocationType {
	MEMORY_ALLOCATION_TYPE_CPU,
	MEMORY_ALLOCATION_TYPE_GPU,
};

enum BufferUsageBits {
	BUFFER_USAGE_TRANSFER_FROM_BIT = 1 << 0,
	BUFFER_USAGE_TRANSFER_TO_BIT = 1 << 1,
	BUFFER_USAGE_TEXEL_BIT = 1 << 2,
	BUFFER_USAGE_UNIFORM_BIT = 1 << 4,
	BUFFER_USAGE_STORAGE_BIT = 1 << 5,
	BUFFER_USAGE_INDEX_BIT = 1 << 6,
	BUFFER_USAGE_VERTEX_BIT = 1 << 7,
	BUFFER_USAGE_INDIRECT_BIT = 1 << 8,
};

enum ImageLayout {
	IMAGE_LAYOUT_UNDEFINED = 0,
	IMAGE_LAYOUT_GENERAL = 1,
	IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
	IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
	IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
	IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
	IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
	IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
	IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
	IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
	IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000,
	IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001,
	IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002,
	IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003,
	IMAGE_LAYOUT_READ_ONLY_OPTIMAL = 1000314000,
	IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = 1000314001,
	IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
	IMAGE_LAYOUT_MAX_ENUM = 0x7FFFFFFF
};

enum ImageFiltering {
	IMAGE_FILTERING_LINEAR,
	IMAGE_FILTERING_NEAREST,
};

enum ImageAspectFlags {
	IMAGE_ASPECT_COLOR_BIT = 0x00000001,
	IMAGE_ASPECT_DEPTH_BIT = 0x00000002,
	IMAGE_ASPECT_STENCIL_BIT = 0x00000004,
};

struct ImageSubresourceLayers {
	ImageAspectFlags aspect_mask;
	uint32_t mip_level;
	uint32_t base_array_layer;
	uint32_t layer_count;
};

enum ImageUsage {
	IMAGE_USAGE_TRANSFER_SRC_BIT = 0x00000001,
	IMAGE_USAGE_TRANSFER_DST_BIT = 0x00000002,
	IMAGE_USAGE_SAMPLED_BIT = 0x00000004,
	IMAGE_USAGE_STORAGE_BIT = 0x00000008,
	IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 0x00000010,
	IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020,
};

enum IndexType {
	INDEX_TYPE_UINT16,
	INDEX_TYPE_UINT32,
};

enum PipelineType {
	PIPELINE_TYPE_GRAPHICS,
	PIPELINE_TYPE_COMPUTE,
};

struct BufferCopyRegion {
	uint64_t src_offset;
	uint64_t dst_offset;
	uint64_t size;
};

struct BufferImageCopyRegion {
	uint64_t buffer_offset;
	uint32_t buffer_row_length;
	uint32_t buffer_image_height;
	ImageSubresourceLayers image_subresource;
	Vec3u image_offset;
	Vec3u image_extent;
};

inline const uint32_t MAX_UNIFORM_SETS = 16;

enum UniformType {
	UNIFORM_TYPE_SAMPLER, // For sampling only (sampler GLSL type).
	UNIFORM_TYPE_SAMPLER_WITH_TEXTURE, // For sampling only, but includes a
									   // texture, (samplerXX GLSL type),
									   // first a sampler then a texture.
	UNIFORM_TYPE_TEXTURE, // Only texture, (textureXX GLSL type).
	UNIFORM_TYPE_IMAGE, // Storage image (imageXX GLSL type), for compute
						// mostly.
	UNIFORM_TYPE_UNIFORM_BUFFER, // Regular uniform buffer (or UBO).
	UNIFORM_TYPE_STORAGE_BUFFER, // Storage buffer ("buffer" qualifier) like
								 // UBO, but supports storage, for compute
								 // mostly.
	UNIFORM_TYPE_INPUT_ATTACHMENT, // Used for sub-pass read/write, for
								   // mobile mostly.
	UNIFORM_TYPE_MAX
};

struct BoundUniform {
	UniformType type = UNIFORM_TYPE_MAX;
	uint32_t binding = 0xffffffff; // Binding index as specified in shader.
	std::vector<UniformSet> ids;
};
